/*1. **Rank the customers based on the total amount they've spent on rentals.***/

use mavenmovies;

select c.first_name, c.last_name, sum(p.amount) as amount_spent, rank() over (order by sum(p.amount) desc) as ranking
from customer as c
left join payment as p on c.customer_id = p.customer_id
group by c.first_name, c.last_name;

/*2. **Calculate the cumulative revenue generated by each film over time.***/

select f.title, p.amount, p.payment_date, sum(p.amount) over (order by p.payment_date asc) as cumulative_revenue
from film as f
left join inventory as i on f.film_id = i.film_id
left join rental as r on r.inventory_id = i.inventory_id
left join payment as p on p.rental_id = r.rental_id;

/*3. **Determine the average rental duration for each film, considering films with similar lengths.***/

select title, length, avg(rental_duration) over (partition by length) as average_rental_duration
from film;

/*4. **Identify the top 3 films in each category based on their rental counts.***/

with cat_film as
(
select f.title, c.name as cat_name, count(r.rental_id) as rental_count, dense_rank() over (partition by c.name order by count(r.rental_id)) as ranking
from film as f
inner join film_category as fc on f.film_id = fc.film_id
inner join category as c on c.category_id = fc.category_id
inner join inventory as i on i.film_id = f.film_id
inner join rental as r on r.inventory_id = i.inventory_id
group by f.title, c.name
)
select *
from cat_film
where ranking <=3;

/*5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals
across all customers.***/

with cust_rentals as
(
select c.first_name, c.last_name, count(r.rental_id) as total_rentals 
from customer as c
inner join rental as r on c.customer_id = r.customer_id
group by c.first_name, c.last_name
)
select *, avg(total_rentals) over () as avg_rental, total_rentals - avg(total_rentals) over () as diff_rental
from cust_rentals;

/*6. **Find the monthly revenue trend for the entire rental store over time.***/

select s.store_id, monthname(p.payment_date) as month, year(p.payment_date) as year, p.payment_date, p.amount, sum(p.amount) over (partition by s.store_id, monthname(p.payment_date) order by p.payment_date) as monthly_revenue
from payment as p
inner join staff as s on p.staff_id = s.staff_id
order by store_id, p.payment_date;

/*7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.***/

with cust_rental_spend as 
(
select c.first_name, c.last_name, sum(amount) as total_spend, round(percent_rank() over (order by sum(amount) desc)*100,2) as percentile
from customer as c
inner join payment as p on c.customer_id = p.customer_id
group by c.first_name, c.last_name
)
select *
from cust_rental_spend
where percentile <= 0.2;

/*8. **Calculate the running total of rentals per category, ordered by rental count.***/

with cat_rentals as
(
select c.name as cat_name, count(r.rental_id) as rental_count
from film as f
inner join film_category as fc on f.film_id = fc.film_id
inner join category as c on c.category_id = fc.category_id
inner join inventory as i on i.film_id = f.film_id
inner join rental as r on r.inventory_id = i.inventory_id
group by c.name
)
select *, sum(rental_count) over (order by rental_count) as running_total
from cat_rentals;

/*9. **Find the films that have been rented less than the average rental count for their respective categories.***/

with cat_rentals as
(
select c.category_id, c.name as cat_name, count(r.rental_id) as cat_rental_count
from film as f
inner join film_category as fc on f.film_id = fc.film_id
inner join category as c on c.category_id = fc.category_id
inner join inventory as i on i.film_id = f.film_id
inner join rental as r on r.inventory_id = i.inventory_id
group by c.category_id, c.name
),
film_rentals as
(
select f.title, c.name as cat_name, count(r.rental_id) as film_rental_count
from film as f
left join inventory as i on f.film_id = i.film_id
left join rental as r on r.inventory_id = i.inventory_id
left join film_category as fc on f.film_id = fc.film_id
left join category as c on c.category_id = fc.category_id
group by f.film_id, f.title, c.name
)
select fr.title, fr.cat_name, fr.film_rental_count
from film_rentals as fr
where fr.film_rental_count < (select cat_rental_count from cat_rentals as cr where cr.cat_name = fr.cat_name);

/*10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.***/

select year(payment_date) as payment_year, monthname(payment_date) as payment_month, sum(amount) as revenue
from payment
group by year(payment_date), monthname(payment_date)
order by revenue desc;